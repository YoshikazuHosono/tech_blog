"# はじめに\n\n`audioplayers`を使用して、複数の効果音を高速かつ連続で再生するという実装をしていました。\n\nすると、効果音の再生後しばらくすると再生が遅延したり、アプリがクラッシュする事象が発生しました。\n\nその際の解決法について記載していきます。\n\n## 動作環境\n\n- Flutter 2.10.0\n- audioplayers: ^0.20.1\n\n## サンプルコード\n\n- [audio_players_sample](https://github.com/YoshikazuHosono/audio_players_sample)\n\n## クラッシュするコード\n\nまず、アセットに含まれる音声ファイルの一覧を定義しています。\n\n```dart\nfinal soundList = [\n  \"C.wav\",\n  \"D.wav\",\n  \"E.wav\",\n  \"F.wav\",\n  \"G.wav\",\n  \"A.wav\",\n  \"B.wav\",\n];\n```\n\n次に、ボタン押下時に Timer を作成し、音声ファイルを 100 milliseconds の間隔でランダムに再生するようにします。\n\n```dart\n            ElevatedButton(\n                onPressed: () {\n                  var audioCache = AudioCache();\n                  crushTimer = Timer.periodic(const Duration(milliseconds: 100), (timer) {\n                    final idx = Random().nextInt(soundList.length);\n                    audioCache.play(soundList[idx]);\n                  });\n                },\n                child: const Text(\"play crush sound\")\n            ),\n```\n\n最後に、音声を停止するボタンを作成します。\n\n```dart\n            ElevatedButton(\n                onPressed: () {\n                  crushTimer?.cancel();\n                },\n                child: const Text(\"stop crush sound\")\n            ),\n```\n\nこの状態で再生ボタンを押下します。\n\n一定時間再生されますが、しばらくするとクラッシュが発生しました。\n\nMac でのシミュレータ実行ではクラッシュしない場合がありますが、IPhone 実機での実行時、かなりの頻度でクラッシュします。\n\n## クラッシュしないコード\n\nTimer を作成するボタン押下時の処理を、以下のように書き換えます。\n\n`soundList`の数だけ`AudioCache`を生成し、Map に変換して保持します。\n\nまた`AudioCache`の引数`fixedPlayer`には、`AudioPlayer`のインスタンスを渡します。\n\n```dart\n            ElevatedButton(\n                onPressed: () {\n                  var audioMap = Map.fromIterables(\n                      soundList,\n                      soundList.map((e) => AudioCache(fixedPlayer: AudioPlayer())).toList()\n                  );\n                  noCrushTimer = Timer.periodic(const Duration(milliseconds: 100), (timer) {\n                    final idx = Random().nextInt(soundList.length);\n                    audioMap[soundList[idx]]?.play(soundList[idx]);\n                  });\n                },\n                child: const Text(\"play no crush sound\")\n            ),\n```\n\n音声の停止は、変更箇所はありません。\n\n```dart\n            ElevatedButton(\n                onPressed: () {\n                  crushTimer?.cancel();\n                },\n                child: const Text(\"stop crush sound\")\n            ),\n```\n\n## なぜクラッシュしなくなるのか\n\n`AudioCache.play`の実装を見てみます。\n\n`player`という変数に格納された`AudioPlayer`に対して、`play`メソッドを呼び出しています。\n\n`get player`とコメントされた箇所で取得しているようなので、その中身を確認します。\n\n```dart\n  Future<AudioPlayer> play(\n    String fileName, {\n    double volume = 1.0,\n    bool? isNotification,\n    PlayerMode mode = PlayerMode.MEDIA_PLAYER,\n    bool stayAwake = false,\n    bool recordingActive = false,\n    bool? duckAudio,\n  }) async {\n    final uri = await load(fileName);\n    final player = _player(mode); # get player\n    if (fixedPlayer != null) {\n      await player.setReleaseMode(ReleaseMode.STOP);\n    }\n    await player.play(\n      uri.toString(),\n      volume: volume,\n      respectSilence: isNotification ?? respectSilence,\n      stayAwake: stayAwake,\n      recordingActive: recordingActive,\n      duckAudio: duckAudio ?? this.duckAudio,\n    );\n    return player;\n  }\n```\n\n`_player`の実装です。\n\n引数から`fixedPlayer`を受け取っていない場合、`play`される度に`AudioPlayer`インスタンスが新規生成されて使用されます。\n\n今回のように高速で何度も`play`メソッドを呼び出す場合に、この処理はメモリ不足を引き起こし、クラッシュや再生の遅延などを発生させていました。\n\n```dart\n  AudioPlayer _player(PlayerMode mode) {\n    return fixedPlayer ?? AudioPlayer(mode: mode);\n  }\n```\n\n## 参考文献\n\n- <https://github.com/bluefireteam/audioplayers/issues/619>\n"
